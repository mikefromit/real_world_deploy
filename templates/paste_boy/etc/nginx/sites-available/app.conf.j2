upstream app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/var/run/paste-boy/gunicorn.sock fail_timeout=0;
}


server {
    listen {{ nginx_http_port|default(80) }};
{% if nginx_extra_http_port is defined and nginx_extra_http_port %}
    listen {{ nginx_extra_http_port }};
{% endif %}
    server_name {{ nginx_server_name|default(app_domain|default('_')) }};

{% if ssl %}
    return 301 https://$host$request_uri;
}
server {
    listen {{ nginx_https_port|default(443) }} ssl;
{% if nginx_extra_https_port is defined and nginx_extra_http_port %}
    listen {{ nginx_extra_https_port }} ssl;
{% endif %}
    server_name {{ nginx_server_name|default(app_domain|default('_')) }};

    ssl_certificate /etc/ssl/certs/{{ nginx_ssl_cert_file_name }};
    ssl_certificate_key /etc/ssl/private/{{ nginx_ssl_key_name }};
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';

{% endif %}

    client_max_body_size 4G;
    large_client_header_buffers 4 32k;
    keepalive_timeout 75;


    {% if nginx_media_root is defined %}
        location /static/ {
            root {{ nginx_app_dir }}/{{ nginx_app_name }};
            gzip_static on;
            expires max;
            access_log off;
            add_header Cache-Control public;
        }

    {% endif %}
    location / {
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_redirect off;
         if (!-f $request_filename) {
             proxy_pass http://app_server;
             break;
         }
    }


}
